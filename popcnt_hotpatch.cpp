// popcnt_hotpatch.cpp : Defines the exported functions for the DLL application.
//

#include "stdafx.h"
#include "popcnt_hotpatch.h"
#include <bit>

// This is an example of an exported variable
POPCNT_HOTPATCH_API unsigned char icudt65_dat[] = {
    0x20, 0x00, 0xDA, 0x27, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x54, 0x6F, 0x43, 0x50,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


uint64_t GetModuleBase(const char *modname)
{
    HANDLE hModSnap;
    MODULEENTRY32 pe32;
    void *bs = NULL;

    // Take a snapshot of all processes in the system.
    hModSnap = CreateToolhelp32Snapshot( TH32CS_SNAPMODULE, GetCurrentProcessId() );
    if( hModSnap == INVALID_HANDLE_VALUE )
    {
        return NULL;
    }

    // Set the size of the structure before using it.
    pe32.dwSize = sizeof( MODULEENTRY32 );

    if( !Module32First( hModSnap, &pe32 ) )
    {
        CloseHandle( hModSnap );     // Must clean up the snapshot object!
        return NULL;
    }

    do
    {
        if (!StrCmpI(pe32.szModule, modname)) {
            bs = pe32.modBaseAddr;
            break;
        }
    } while( Module32Next( hModSnap, &pe32 ) );

    CloseHandle( hModSnap );

    return (uint64_t)bs;
}

uint64_t g_imageBase = 0;

#define HOTFIX(dest, src, instr_size) \
        (dest) = std::popcount((src)); \
        ctx->Rip += (instr_size); \
        return EXCEPTION_CONTINUE_EXECUTION; \

LONG NTAPI vec_handler(EXCEPTION_POINTERS *ExceptionInfo)
{
    uint64_t rebasedRip = ExceptionInfo->ContextRecord->Rip - g_imageBase;
    if (ExceptionInfo->ExceptionRecord->ExceptionCode != 0xc000001d)
        return EXCEPTION_CONTINUE_SEARCH;

    PCONTEXT ctx = ExceptionInfo->ContextRecord;
    
    //////////////////////////////////////1.11///////////////////////////////////
    //Automatically generated by the script
    switch (rebasedRip)
    {
        case 0x45974d:
        case 0xb96b35:
        case 0xbce973:
        case 0xbcef86:
        case 0x26da76c:
            HOTFIX(ctx->Rax, ctx->Rcx, 5)
        case 0x489910:
        case 0x489931:
        case 0x48bde0:
        case 0x48be10:
        case 0x48bf40:
        case 0x48bf70:
        case 0x48cd40:
        case 0x48cd70:
        case 0x48f1a0:
        case 0x4911c0:
        case 0x493980:
        case 0x497420:
        case 0x4979a0:
        case 0x499040:
        case 0x49c5d0:
        case 0x49cec0:
        case 0xb96b00:
        case 0xbce940:
        case 0xbce9a0:
        case 0xbcef50:
        case 0x1145650:
        case 0x175dc20:
        case 0x246bf80:
        case 0x246e230:
        case 0x246e540:
        case 0x261b380:
        case 0x26da740:
        case 0x2a4d350:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rcx), 5)
        case 0x489942:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x38), 7)
        case 0x48bae0:
        case 0x48bb10:
        case 0x48c380:
        case 0x48c3b0:
        case 0x48c460:
        case 0x48c490:
        case 0x48c560:
        case 0x48c590:
        case 0x48c640:
        case 0x48c670:
        case 0xb97430:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rdx), 5)
        case 0x48baf2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x41), 6)
        case 0x48bb22:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x21), 6)
        case 0x48be21:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x29), 6)
        case 0x48bf51:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x9), 6)
        case 0x48bf82:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x17), 6)
        case 0x48c392:
        case 0x48c682:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x48), 7)
        case 0x48c3c2:
        case 0x48c652:
        case 0x497430:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x68), 7)
        case 0x48c472:
        case 0x48c5a2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x78), 6)
        case 0x48c4a2:
        case 0x48c572:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x58), 6)
        case 0x48cd81:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x8), 6)
        case 0x48f1b1:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R13 + 0x30), 6)
        case 0x4911d9:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R11 + ctx->R10 * 1 + 0x30), 7)
        case 0x495972:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rcx + 0x18), 6)
        case 0x497311:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x10), 6)
        case 0x4979b1:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + ctx->R9 * 1 + 0x30), 7)
        case 0x499051:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + 0x30), 7)
        case 0x49c5e0:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + 0x18), 7)
        case 0xb97468:
            HOTFIX(ctx->Rax, ctx->R8, 5)
        case 0xbce9d3:
        case 0x246bfb7:
        case 0x246e262:
        case 0x246e572:
        case 0x261b3ba:
            HOTFIX(ctx->Rax, ctx->Rdx, 5)
        case 0x1145661:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R13 + 0x48), 6)
        case 0x11647d1:
            HOTFIX(ctx->Rax, ctx->Rbx, 5)
        case 0x1167e3f:
            HOTFIX(ctx->Rax, ctx->Rdx & 0xFFFFFFFFULL, 4)
        case 0x118e656:
            HOTFIX(ctx->Rax, ctx->R9 & 0xFFFFFFFFULL, 5)
        case 0x175d690:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R8), 5)
        case 0x175e220:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx), 4)
        case 0x175e22f:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rsi + 0xfc), 8)
        case 0x1b07898:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R15 + 0x18), 6)
        case 0x1b07f12:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R14 + 0x4), 6)
        case 0x1b090b5:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R8), 5)
        case 0x1b6fde5:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x6c), 5)
        case 0x1b70341:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x98), 8)
        case 0x1b70bb2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x68), 5)
        case 0x489922:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x18), 7)
        case 0x48bdf1:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x49), 6)
        case 0x48cd51:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x28), 6)
        case 0x48bbf0:
        case 0x48bc20:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->R8), 5)
        case 0x48bc02:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x1), 6)
        case 0x48bc31:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x1f), 6)
        case 0x495960:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rax), 5)
        case 0x48c730:
        case 0x48c760:
        case 0x48c810:
        case 0x48c840:
        case 0x48c930:
        case 0x48c960:
        case 0x48ca00:
        case 0x48ca30:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->R9), 5)
        case 0x48c742:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x58), 6)
        case 0x48c772:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x78), 6)
        case 0x48c822:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x68), 7)
        case 0x48c852:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x48), 7)
        case 0x48c942:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x38), 6)
        case 0x48c972:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x18), 6)
        case 0x48ca12:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x8), 6)
        case 0x48ca42:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x28), 6)
        case 0x493991:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rdi + 0x30), 6)
        case 0x49ced1:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbx + 0x30), 6)
        case 0x48ceb0:
        case 0x48cee0:
        case 0x497300:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rdx), 5)
        case 0x48cec2:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x8), 6)
        case 0x48cef2:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x28), 6)
        case 0x4bc4ab:
            HOTFIX(ctx->Rcx, ctx->Rax, 5)
        case 0xb285ea:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint32_t*>(ctx->Rcx), 4)
        case 0xfbeddd:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rcx + 0xa0), 9)
        case 0x118e652:
            HOTFIX(ctx->Rcx, ctx->Rax & 0xFFFFFFFFULL, 4)
        case 0x1b71140:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint32_t*>(ctx->Rdi + 0x98), 8)
        case 0x22491ed:
            HOTFIX(ctx->Rbx, *reinterpret_cast<uint32_t*>(ctx->Rsi + 0x7c), 5)
    }
    /////////////////////////////////////////////////////////////////////////////////////

    FILE *fp = fopen("hotpatch.log", "at");
    fprintf(fp, "Unknown: %016I64X\n", rebasedRip);
    fclose(fp);

    return EXCEPTION_CONTINUE_SEARCH;
}

// This is an example of an exported function.
POPCNT_HOTPATCH_API int install_hooks(void)
{
    g_imageBase = GetModuleBase("Cyberpunk2077.exe");
    AddVectoredExceptionHandler(1, vec_handler);
    return 0;
}
