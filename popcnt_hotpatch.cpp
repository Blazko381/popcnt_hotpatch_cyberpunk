// popcnt_hotpatch.cpp : Defines the exported functions for the DLL application.
//

#include "stdafx.h"
#include "popcnt_hotpatch.h"
#include <bit>

// This is an example of an exported variable
POPCNT_HOTPATCH_API unsigned char icudt65_dat[] = {
    0x20, 0x00, 0xDA, 0x27, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x54, 0x6F, 0x43, 0x50,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


uint64_t GetModuleBase(const char *modname)
{
    HANDLE hModSnap;
    MODULEENTRY32 pe32;
    void *bs = NULL;

    // Take a snapshot of all processes in the system.
    hModSnap = CreateToolhelp32Snapshot( TH32CS_SNAPMODULE, GetCurrentProcessId() );
    if( hModSnap == INVALID_HANDLE_VALUE )
    {
        return NULL;
    }

    // Set the size of the structure before using it.
    pe32.dwSize = sizeof( MODULEENTRY32 );

    if( !Module32First( hModSnap, &pe32 ) )
    {
        CloseHandle( hModSnap );     // Must clean up the snapshot object!
        return NULL;
    }

    do
    {
        if (!StrCmpI(pe32.szModule, modname)) {
            bs = pe32.modBaseAddr;
            break;
        }
    } while( Module32Next( hModSnap, &pe32 ) );

    CloseHandle( hModSnap );

    return (uint64_t)bs;
}

uint64_t g_imageBase = 0;

#define HOTFIX(dest, src, instr_size) \
        (dest) = std::popcount((src)); \
        ctx->Rip += (instr_size); \
        return EXCEPTION_CONTINUE_EXECUTION; \

LONG NTAPI vec_handler(EXCEPTION_POINTERS *ExceptionInfo)
{
    uint64_t rebasedRip = ExceptionInfo->ContextRecord->Rip - g_imageBase;
    if (ExceptionInfo->ExceptionRecord->ExceptionCode != 0xc000001d)
        return EXCEPTION_CONTINUE_SEARCH;

    PCONTEXT ctx = ExceptionInfo->ContextRecord;
    
    //////////////////////////////////////1.12///////////////////////////////////
    //Automatically generated by the script
    switch (rebasedRip)
    {
        case 0x45972d:
        case 0xb96b15:
        case 0xbce953:
        case 0xbcef66:
        case 0x26da79c:
            HOTFIX(ctx->Rax, ctx->Rcx, 5)
        case 0x4898f0:
        case 0x489911:
        case 0x48bdc0:
        case 0x48bdf0:
        case 0x48bf20:
        case 0x48bf50:
        case 0x48cd20:
        case 0x48cd50:
        case 0x48f180:
        case 0x4911a0:
        case 0x493960:
        case 0x497400:
        case 0x497980:
        case 0x499020:
        case 0x49c5b0:
        case 0x49cea0:
        case 0xb96ae0:
        case 0xbce920:
        case 0xbce980:
        case 0xbcef30:
        case 0x1145630:
        case 0x175dc70:
        case 0x246bfb0:
        case 0x246e260:
        case 0x246e570:
        case 0x261b3b0:
        case 0x26da770:
        case 0x2a4d330:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rcx), 5)
        case 0x489922:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x38), 7)
        case 0x48bac0:
        case 0x48baf0:
        case 0x48c360:
        case 0x48c390:
        case 0x48c440:
        case 0x48c470:
        case 0x48c540:
        case 0x48c570:
        case 0x48c620:
        case 0x48c650:
        case 0xb97410:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rdx), 5)
        case 0x48bad2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x41), 6)
        case 0x48bb02:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x21), 6)
        case 0x48be01:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x29), 6)
        case 0x48bf31:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x9), 6)
        case 0x48bf62:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x17), 6)
        case 0x48c372:
        case 0x48c662:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x48), 7)
        case 0x48c3a2:
        case 0x48c632:
        case 0x497410:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x68), 7)
        case 0x48c452:
        case 0x48c582:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x78), 6)
        case 0x48c482:
        case 0x48c552:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x58), 6)
        case 0x48cd61:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x8), 6)
        case 0x48f191:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R13 + 0x30), 6)
        case 0x4911b9:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R11 + ctx->R10 * 1 + 0x30), 7)
        case 0x495952:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rcx + 0x18), 6)
        case 0x4972f1:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x10), 6)
        case 0x497991:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + ctx->R9 * 1 + 0x30), 7)
        case 0x499031:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + 0x30), 7)
        case 0x49c5c0:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + 0x18), 7)
        case 0xb97448:
            HOTFIX(ctx->Rax, ctx->R8, 5)
        case 0xbce9b3:
        case 0x246bfe7:
        case 0x246e292:
        case 0x246e5a2:
        case 0x261b3ea:
            HOTFIX(ctx->Rax, ctx->Rdx, 5)
        case 0x1145641:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R13 + 0x48), 6)
        case 0x11647b1:
            HOTFIX(ctx->Rax, ctx->Rbx, 5)
        case 0x1167e1f:
            HOTFIX(ctx->Rax, ctx->Rdx & 0xFFFFFFFFULL, 4)
        case 0x118e636:
            HOTFIX(ctx->Rax, ctx->R9 & 0xFFFFFFFFULL, 5)
        case 0x175d6e0:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R8), 5)
        case 0x175e270:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx), 4)
        case 0x175e27f:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rsi + 0xfc), 8)
        case 0x1b07928:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R15 + 0x18), 6)
        case 0x1b07fa2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R14 + 0x4), 6)
        case 0x1b09145:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R8), 5)
        case 0x1b6fe75:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x6c), 5)
        case 0x1b703d1:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x98), 8)
        case 0x1b70c42:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x68), 5)
        case 0x489902:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x18), 7)
        case 0x48bdd1:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x49), 6)
        case 0x48cd31:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x28), 6)
        case 0x48bbd0:
        case 0x48bc00:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->R8), 5)
        case 0x48bbe2:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x1), 6)
        case 0x48bc11:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x1f), 6)
        case 0x495940:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rax), 5)
        case 0x48c710:
        case 0x48c740:
        case 0x48c7f0:
        case 0x48c820:
        case 0x48c910:
        case 0x48c940:
        case 0x48c9e0:
        case 0x48ca10:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->R9), 5)
        case 0x48c722:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x58), 6)
        case 0x48c752:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x78), 6)
        case 0x48c802:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x68), 7)
        case 0x48c832:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x48), 7)
        case 0x48c922:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x38), 6)
        case 0x48c952:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x18), 6)
        case 0x48c9f2:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x8), 6)
        case 0x48ca22:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x28), 6)
        case 0x493971:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rdi + 0x30), 6)
        case 0x49ceb1:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbx + 0x30), 6)
        case 0x48ce90:
        case 0x48cec0:
        case 0x4972e0:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rdx), 5)
        case 0x48cea2:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x8), 6)
        case 0x48ced2:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x28), 6)
        case 0x4bc48b:
            HOTFIX(ctx->Rcx, ctx->Rax, 5)
        case 0xb285ca:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint32_t*>(ctx->Rcx), 4)
        case 0xfbedbd:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rcx + 0xa0), 9)
        case 0x118e632:
            HOTFIX(ctx->Rcx, ctx->Rax & 0xFFFFFFFFULL, 4)
        case 0x1b711d0:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint32_t*>(ctx->Rdi + 0x98), 8)
        case 0x224921d:
            HOTFIX(ctx->Rbx, *reinterpret_cast<uint32_t*>(ctx->Rsi + 0x7c), 5)
    }
    /////////////////////////////////////////////////////////////////////////////////////

    FILE *fp = fopen("hotpatch.log", "at");
    fprintf(fp, "Unknown: %016I64X\n", rebasedRip);
    fclose(fp);

    return EXCEPTION_CONTINUE_SEARCH;
}

// This is an example of an exported function.
POPCNT_HOTPATCH_API int install_hooks(void)
{
    g_imageBase = GetModuleBase("Cyberpunk2077.exe");
    AddVectoredExceptionHandler(1, vec_handler);
    return 0;
}
